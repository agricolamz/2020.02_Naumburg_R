[
["intro.html", "2 Introduction to R and RStudio 2.1 Introduction 2.2 Introduction to RStudio 2.3 R as a calculator 2.4 Comments 2.5 Functions 2.6 Variables 2.7 Vector 2.8 PacSome functions doesn‚Äôt work with 2.9 Dataframe (tibble) 2.10 Data import 2.11 Rmarkdown", " 2 Introduction to R and RStudio 2.1 Introduction 2.1.1 Why data science? Data science is a new field that is actively developing lately. This field merges computer science, maths, statistics, and it is hard to say how much science in data science. In many scientific fields a new data science paradigm arises and even forms a new sub-field: Bioinformatics Crime data analysis Digital humanities Data journalism Data driven medicine ‚Ä¶ There are a lot of new books ‚ÄúData Science for ‚Ä¶‚Äù: psychologists (Hansj√∂rg 2019) immunologists (Thomas and Pallett 2019) business (Provost and Fawcett 2013) public policy (Brooks and Cooper 2013) fraud detection (Baesens, Van Vlasselaer, and Verbeke 2015) ‚Ä¶ Data scientist need to be able to: gather data transform data visualize data create a statistical model based on data share and represent the results of this work organize the whole workflow in a reproducible way 2.1.2 Why R? R (R Core Team 2019) is a programming language with a big infrastructure of packages that helps to work in different fields of science and computer technology. There are several alternatives: Python (VanderPlas 2016; Grus 2019) Julia (Bezanson et al. 2017) bash (Janssens 2014) java (Brzustowicz 2017) ‚Ä¶ You can find some R answers here: R for data science (Wickham and Grolemund 2016), it is online R community stackoverflow any search engine you use ‚Ä¶ 2.2 Introduction to RStudio R is the programming language. RStudio is the most popular IDE (Integrated Development Environment) for R language. When you open RStudio for the first time you can see something like this: When you press button at the top of the left window you will be able to see all four panels of RStudio. 2.3 R as a calculator Lets first start with a calculator. Press in R console 2+9 ## [1] 11 50*(9-20) ## [1] -550 3^3 ## [1] 27 9^0.5 ## [1] 3 9+0.5 ## [1] 9.5 9+.5 ## [1] 9.5 pi ## [1] 3.141593 Reminder after division 10 %% 3 ## [1] 1 So you are ready to solve some really hard equations (round it four decimal places): \\[\\frac{\\pi+2}{2^{3-\\pi}}\\] üìã list of hints ‚û° üëÅ Are you sure that you rounded the result? ‚û° I expect the answer to be rounded to four decimal places: 0.87654321 becomes 0.8765. üëÅ Are you sure you didn‚Äôt get into the brackets trap? ‚û° Even though there isn‚Äôt any brackets in the mathematical notation, you need to add them in R, otherwise the operation order will be wrong. 2.4 Comments The whole text after the hash # within the same line is considered a comment. 2+2 # it is four ## [1] 4 # you can put any comments here 3+3 ## [1] 6 2.5 Functions The most important part of R is functions: here are some of them: sqrt(4) ## [1] 2 abs(-5) ## [1] 5 sin(pi/2) ## [1] 1 cos(pi) ## [1] -1 sum(2, 3, 9) ## [1] 14 prod(5, 3, 9) ## [1] 135 sin(cos(pi)) ## [1] -0.841471 Each function has a name and zero or more arguments. All arguments of the function should be listed in parenthesis and separated by comma: pi ## [1] 3.141593 round(pi, 2) ## [1] 3.14 Each function‚Äôs argument has its own name and serial number. If you use names of the function‚Äôs arguments, you can put them in any order. If you do not use names of the function‚Äôs arguments, you should put them according the serial number. round(x = pi, digits = 2) ## [1] 3.14 round(digits = 2, x = pi) ## [1] 3.14 round(x = pi, d = 2) ## [1] 3.14 round(d = 2, x = pi) ## [1] 3.14 round(pi, 2) ## [1] 3.14 round(2, pi) # this is not the same as all previouse! ## [1] 2 There are some functions without any arguments, but you still should use parenthesis: Sys.Date() # correct ## [1] &quot;2020-02-06&quot; Sys.Date # wrong ## function () ## as.Date(as.POSIXlt(Sys.time())) ## &lt;bytecode: 0x5e2c85e6d868&gt; ## &lt;environment: namespace:base&gt; Each function in R is documented. You can read its documentation typing question mark before the function name: ?Sys.Date Explore the function log() and calculate the following logarithm: \\[\\log_3(3486784401)\\] üìã list of hints ‚û° üëÅ A-a-a! I don‚Äôt remember anything about logarithms‚Ä¶ ‚û° The logarithm is the inverse function to exponentiation. That means the logarithm of a given number x is the exponent to which another fixed number, the base b, must be raised, to produce that number x. \\[10^n = 1000,\\text{ what is n?}\\] \\[n = \\log_{10}(1000)\\] üëÅ What is this small 3 in the task means? ‚û° This is the base of the logarithm. So the task is: what is the exponent to which another fixed number, the base 3, must be raised, to produce that number 3486784401. 2.6 Variables Everything in R can be stored in a variable: x &lt;- 5 + 6 As a result, no output in the Console, and a new variable x appear in the Environment window. From now on I can use this new variable: x + x ## [1] 22 sum(x, x, 7) ## [1] 29 All those operations don‚Äôt change the variable value. In order to change the variable value you need to make a new assignment: x &lt;- 5 + 6 + 7 The fast way for creating &lt;- in RStudio is to press Alt - on your keyboard. It is possible to use equal sign = for assignment operation, but the recommendations are use arrow &lt;- for the assignment, and equal sign = for giving arguments‚Äô value inside the functions. For removing vector you need to use function rm(): rm(x) x ## Error in eval(expr, envir, enclos): object &#39;x&#39; not found 2.6.1 Variable comparison It is possible to compare different variables x &lt;- 18 x &gt; 18 ## [1] FALSE x &gt;= 18 ## [1] TRUE x &lt; 100 ## [1] TRUE x &lt;= 18 ## [1] TRUE x == 18 ## [1] TRUE x != 18 ## [1] FALSE 2.6.2 Variable types There are several types of variable in R. In this course the only important types will be double (all numbers), character (or strings), and logical: x &lt;- 2+3 typeof(x) ## [1] &quot;double&quot; y &lt;- &quot;Cze≈õƒá&quot; typeof(y) ## [1] &quot;character&quot; z &lt;- TRUE typeof(z) ## [1] &quot;logical&quot; 2.7 Vector R object that contain multiple values of the same type is called vector. It could be created with the command c(): c(3, 0, pi, 23.4, -53) ## [1] 3.000000 0.000000 3.141593 23.400000 -53.000000 c(&quot;Krak√≥w&quot;, &quot;Warszawa&quot;, &quot;Cieszyn&quot;) ## [1] &quot;Krak√≥w&quot; &quot;Warszawa&quot; &quot;Cieszyn&quot; c(FALSE, FALSE, TRUE) ## [1] FALSE FALSE TRUE a &lt;- c(2, 3, 4) b &lt;- c(5, 6, 7) c(a, b) ## [1] 2 3 4 5 6 7 For the number sequences there is an easy way: 1:10 ## [1] 1 2 3 4 5 6 7 8 9 10 3:-5 ## [1] 3 2 1 0 -1 -2 -3 -4 -5 From now you can understand that all we have seen before is a vector of length one. That is why there is [1] in all outputs: it is just an index of elements in vector. Have a look here: 1:60 ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ## [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ## [51] 51 52 53 54 55 56 57 58 59 60 60:1 ## [1] 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 ## [26] 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 ## [51] 10 9 8 7 6 5 4 3 2 1 There is also a function sec() for creation of arithmetic progressions: 1:20 ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 seq(from = 1, to = 20, by = 1) ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 seq(from = 2, to = 100, by = 13) ## [1] 2 15 28 41 54 67 80 93 Use argument length.out of function seq() and create an arithmetic sequence from \\(\\pi\\) to \\(2\\pi\\) of length 50. There are also some built-in vectors: letters ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; ## [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; LETTERS ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; ## [20] &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; month.name ## [1] &quot;January&quot; &quot;February&quot; &quot;March&quot; &quot;April&quot; &quot;May&quot; &quot;June&quot; ## [7] &quot;July&quot; &quot;August&quot; &quot;September&quot; &quot;October&quot; &quot;November&quot; &quot;December&quot; month.abb ## [1] &quot;Jan&quot; &quot;Feb&quot; &quot;Mar&quot; &quot;Apr&quot; &quot;May&quot; &quot;Jun&quot; &quot;Jul&quot; &quot;Aug&quot; &quot;Sep&quot; &quot;Oct&quot; &quot;Nov&quot; &quot;Dec&quot; 2.7.1 Vector coercion Vectors are R objects that contain multiple values of the same type. But what if we merge together different types? c(1, &quot;34&quot;) ## [1] &quot;1&quot; &quot;34&quot; c(1, TRUE) ## [1] 1 1 c(TRUE, &quot;34&quot;) ## [1] &quot;TRUE&quot; &quot;34&quot; It is clear that there is hierarchy: strings &gt; double &gt; logical. It is not universal across different programming languages. It doesn‚Äôt correspond to amount of values of particular type: c(1, 2, 3, &quot;34&quot;) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;34&quot; c(1, TRUE, FALSE, FALSE) ## [1] 1 1 0 0 The same story could happen during other operations: 5+TRUE ## [1] 6 2.7.2 Vector operations All operation that we discussed earlier could be done with vectors of the same length: 1:5 + 6:10 ## [1] 7 9 11 13 15 1:5 - 6:10 ## [1] -5 -5 -5 -5 -5 1:5 * 6:10 ## [1] 6 14 24 36 50 There are operation where the vector of any length and vector of length one is involved: 1:5 + 7 ## [1] 8 9 10 11 12 1:5 - 7 ## [1] -6 -5 -4 -3 -2 1:5 / 7 ## [1] 0.1428571 0.2857143 0.4285714 0.5714286 0.7142857 There are a lot of functions in R that are vectorised. That means that applying this function to a vector is the same as apply this function to each ellement of the vector: sin(1:5) ## [1] 0.8414710 0.9092974 0.1411200 -0.7568025 -0.9589243 sqrt(1:5) ## [1] 1.000000 1.414214 1.732051 2.000000 2.236068 abs(-5:3) ## [1] 5 4 3 2 1 0 1 2 3 2.7.3 Indexing vectors How to get some value or banch of values from a vector? You need to index them: x &lt;- c(3, 0, pi, 23.4, -53) y &lt;- c(&quot;Krak√≥w&quot;, &quot;Warszawa&quot;, &quot;Cieszyn&quot;) x[4] ## [1] 23.4 y[2] ## [1] &quot;Warszawa&quot; It is possible to have a vector as index: x[1:2] ## [1] 3 0 y[c(1, 3)] ## [1] &quot;Krak√≥w&quot; &quot;Cieszyn&quot; It is possible to index something that you do not want to see in the result: y[-2] ## [1] &quot;Krak√≥w&quot; &quot;Cieszyn&quot; x[-c(1, 4)] ## [1] 0.000000 3.141593 -53.000000 It is possible to have other variables as an index z &lt;- c(3, 2) x[z] ## [1] 3.141593 0.000000 y[z] ## [1] &quot;Cieszyn&quot; &quot;Warszawa&quot; It is possible to index with logical vector: x[c(TRUE, FALSE, TRUE, TRUE, FALSE)] ## [1] 3.000000 3.141593 23.400000 That means that we could use TRUE/FALSE-vector produced by comparison: x[x &gt; 2] ## [1] 3.000000 3.141593 23.400000 It works because x &gt; 2 is a vector of logical values: x &gt; 2 ## [1] TRUE FALSE TRUE TRUE FALSE How many ellements in the vector g if expression g[pi &lt; 1000] does not return an error? 2.7.4 NA Some times there are some missing values in data, so it is represent with NA NA ## [1] NA c(1, NA, 9) ## [1] 1 NA 9 c(&quot;Krak√≥w&quot;, NA, &quot;Cieszyn&quot;) ## [1] &quot;Krak√≥w&quot; NA &quot;Cieszyn&quot; c(TRUE, FALSE, NA) ## [1] TRUE FALSE NA It is possible to check, whether there are missing values x &lt;- c(&quot;Krak√≥w&quot;, NA, &quot;Cieszyn&quot;) y &lt;- c(&quot;Krak√≥w&quot;, &quot;Warszawa&quot;, &quot;Cieszyn&quot;) is.na(x) ## [1] FALSE TRUE FALSE is.na(y) ## [1] FALSE FALSE FALSE 2.8 PacSome functions doesn‚Äôt work with Some f The mt impoortant and useful part of R is hidden in its packages. Everything that we discussed so far is base R functionality invented back in 1979. Since then a lot of different things changed, so all new practicies for data analysis, visualisation and manipulation are packed in packages. During our class we will learn the most popular ‚Äúdialect‚Äù of R called tidyverse. In order to install packages you need to use command. Let‚Äôs install the tidyverse package: install.packages(&quot;tidyverse&quot;) For today we also will need the readxl package: install.packages(&quot;tidyverse&quot;) After you have downloaded packages nothing will change. You can not use any fucntionality from packages unless you load the package with the library() function: library(&quot;tidyverse&quot;) ## ‚îÄ‚îÄ Attaching packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 1.3.0 ‚îÄ‚îÄ ## ‚úì ggplot2 3.2.1 ‚úì purrr 0.3.3 ## ‚úì tibble 2.1.3 ‚úì dplyr 0.8.3 ## ‚úì tidyr 1.0.0 ‚úì stringr 1.4.0 ## ‚úì readr 1.3.1 ‚úì forcats 0.4.0 ## ‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() Not turning on R package is the most popular mistake of my students. So remmember: install.packages(\"...\") is like you are buying a screwdriver set; library(\"...\") is like you are start using your screwdriver. For the further lectures we will need tidyverse package. Please install tidyverse package and load it. 2.8.1 tidyverse The tidyverse is a set of packages: tibble, for tibbles, a modern re-imagining of data frames ‚Äî analugue of tables in R readr, for data import dplyr, for data manipulation tidyr, for data tidying (we will discuss it later today) ggplot2, for data visualisation purrr, for functional programming 2.9 Dataframe (tibble) 2.9.1 Indexing dataframes 2.10 Data import 2.10.1 .csv files Because of 2019‚Äì20 Wuhan coronavirus outbreak the city of Wuhan is evrywhere on media. In Russian for some reason Wuhan is masculsometimes ine and sometimes is feminin. I looked into other Slavic languages and recorded obtained data into the .csv file. Download this files to R. What variables does it have? 2.10.2 .xls and .xlsx files 2.11 Rmarkdown References "]
]
