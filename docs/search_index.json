[
["dplyr.html", "3 Data manipulation: dplyr 3.1 Data 3.2 dplyr 3.3 Merging dataframes 3.4 tidyr package", " 3 Data manipulation: dplyr First, load the library: library(tidyverse) 3.1 Data In this chapter we will use the following datasets. 3.1.1 Misspelling dataset I gathered this dataset after some manipulations with data from The Gyllenhaal Experiment by Russell Goldenberg and Matt Daniels for pudding. They analized mistakes in spellings of celebrities during the searching process. misspellings &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/2020.02_Naumburg_R/master/data/misspelling_dataset.csv&quot;) ## Parsed with column specification: ## cols( ## correct = col_character(), ## spelling = col_character(), ## count = col_double() ## ) misspellings There are the following variables in this dataset: correct — correct spelling spelling — user’s spelling count — number of cases of user’s spelling 3.1.2 diamonds diamonds — is the dataset built-in in the tidyverse package. diamonds ?diamonds 3.2 dplyr Here and here is a cheatsheet on dplyr. 3.2.1 filter() This function filters rows under some conditions. How many wrong spellings were used by less then 10 users? misspellings %&gt;% filter(count &lt; 10) %&gt;% it is pipe. It allows to chain operations, putting the output of one function into the input of another: sort(sqrt(abs(sin(1:22))), decreasing = TRUE) ## [1] 0.9999951 0.9952926 0.9946649 0.9805088 0.9792468 0.9554817 0.9535709 ## [8] 0.9173173 0.9146888 0.8699440 0.8665952 0.8105471 0.8064043 0.7375779 ## [15] 0.7325114 0.6482029 0.6419646 0.5365662 0.5285977 0.3871398 0.3756594 ## [22] 0.0940814 1:22 %&gt;% sin() %&gt;% abs() %&gt;% sqrt() %&gt;% sort(., decreasing = TRUE) # why do we need a dot here? ## [1] 0.9999951 0.9952926 0.9946649 0.9805088 0.9792468 0.9554817 0.9535709 ## [8] 0.9173173 0.9146888 0.8699440 0.8665952 0.8105471 0.8064043 0.7375779 ## [15] 0.7325114 0.6482029 0.6419646 0.5365662 0.5285977 0.3871398 0.3756594 ## [22] 0.0940814 Pipes that are used in tidyverse are from the package magrittr. Sometimes pipe could work not well with functions outside the tidyverse. So filter() function returns rows with matching conditions: misspellings %&gt;% filter(count &lt; 10) It is possible to use multiple conditions. How many wrong spellings of Deschanel were used by less then 10 users? misspellings %&gt;% filter(count &lt; 10, correct == &quot;deschanel&quot;) It is possible to use OR conditions. How many wrong spellings were used by less then 10 OR more then 500 users? misspellings %&gt;% filter(count &lt; 10 | count &gt; 500) 3.2.2 slice() This function filters rows by its index. misspellings %&gt;% slice(3:7) 3.2.3 select() This functions for choosing variables from a dataframe. diamonds %&gt;% select(8:10) diamonds %&gt;% select(color:price) diamonds %&gt;% select(-carat) diamonds %&gt;% select(-c(carat, cut, x, y, z)) diamonds %&gt;% select(cut, depth, price) 3.2.4 arrange() This function orders rows in a dataframe (numbers — by order, strings — alphabetically). misspellings %&gt;% arrange(count) diamonds %&gt;% arrange(desc(carat), price) diamonds %&gt;% arrange(-carat, price) 3.2.5 distinct() This function returns only unique rows from an input dataframe. misspellings %&gt;% distinct(correct) misspellings %&gt;% distinct(spelling) diamonds %&gt;% distinct(color, cut) In built-in dataset starwars filter those characters that are higher then 180 (height) and weigh less then 80 (mass). How many unique names of their homeworlds (homeworld) is there? 3.2.6 mutate() This function creates new variables. misspellings %&gt;% mutate(misspelling_length = nchar(spelling), id = 1:n()) Create a variable with body mass index индексом Кетле: \\(\\frac{mass}{height^2}\\) for all characters from starwars dataset. How many charachters have obesity (have body mass index greater 30)? (Don’t forget to convert height from centimetres to metres). 3.2.7 group_by(...) %&gt;% summarise(...) This function allows to group variables by some columns and get some descriptive statistics (maximum, minimum, last value, first value, mean, median etc.) misspellings %&gt;% summarise(min(count), mean(count)) misspellings %&gt;% group_by(correct) %&gt;% summarise(mean(count)) misspellings %&gt;% group_by(correct) %&gt;% summarise(my_mean = mean(count)) If you need to calculate number of cases, use the function n() in summarise() or the count() function: misspellings %&gt;% group_by(correct) %&gt;% summarise(n = n()) misspellings %&gt;% count(correct) It is even possible to sort the result, using sort argument: misspellings %&gt;% count(correct, sort = TRUE) In case you don’t want to have any summary, but an additional column, just replace summarise() with mutate() misspellings %&gt;% group_by(correct) %&gt;% mutate(my_mean = mean(count)) Here is a scheme: In the starwars dataset create a variable that contains mean height value for each species. 3.3 Merging dataframes 3.3.1 bind_... This is a family of functions that make it possible to merge dataframes together: my_tbl &lt;- tibble(a = c(1, 5, 2), b = c(&quot;e&quot;, &quot;g&quot;, &quot;s&quot;)) Here is how to merge two datasets by row: my_tbl %&gt;% bind_rows(my_tbl) In case there is an absent column, values will be filled with NA: my_tbl %&gt;% bind_rows(my_tbl[,-1]) In order to merge dataframes by column you need another function: my_tbl %&gt;% bind_cols(my_tbl) In case there is an absent row, this function will return an error: my_tbl %&gt;% bind_cols(my_tbl[-1,]) ## Error: Argument 2 must be length 3, not 2 3.3.2 .._join() These functions allow to merge different datasets by some column (or columns in common). languages &lt;- data_frame( languages = c(&quot;Selkup&quot;, &quot;French&quot;, &quot;Chukchi&quot;, &quot;Polish&quot;), countries = c(&quot;Russia&quot;, &quot;France&quot;, &quot;Russia&quot;, &quot;Poland&quot;), iso = c(&quot;sel&quot;, &quot;fra&quot;, &quot;ckt&quot;, &quot;pol&quot;) ) ## Warning: `data_frame()` is deprecated, use `tibble()`. ## This warning is displayed once per session. languages country_population &lt;- data_frame( countries = c(&quot;Russia&quot;, &quot;Poland&quot;, &quot;Finland&quot;), population_mln = c(143, 38, 5)) country_population inner_join(languages, country_population) ## Joining, by = &quot;countries&quot; left_join(languages, country_population) ## Joining, by = &quot;countries&quot; right_join(languages, country_population) ## Joining, by = &quot;countries&quot; anti_join(languages, country_population) ## Joining, by = &quot;countries&quot; anti_join(country_population, languages) ## Joining, by = &quot;countries&quot; full_join(country_population, languages) ## Joining, by = &quot;countries&quot; 3.4 tidyr package Here is a dataset with the number of speakers of some language of India according the census 2001 (data from Wikipedia): langs_in_india_short &lt;- read_csv(&quot;https://raw.githubusercontent.com/agricolamz/2020.02_Naumburg_R/master/data/languages_in_india.csv&quot;) ## Parsed with column specification: ## cols( ## language = col_character(), ## n_L1_sp = col_double(), ## n_L2_sp = col_double(), ## n_L3_sp = col_double(), ## n_all_sp = col_double() ## ) Wide format langs_in_india_short Long format Wide format → Long format: tidyr::pivot_longer() langs_in_india_short %&gt;% pivot_longer(names_to = &quot;type&quot;, values_to = &quot;n_speakers&quot;, n_L1_sp:n_all_sp)-&gt; langs_in_india_long langs_in_india_long Long format → Wide format: tidyr::pivot_wider() langs_in_india_long %&gt;% pivot_wider(names_from = &quot;type&quot;, values_from = &quot;n_speakers&quot;)-&gt; langs_in_india_short langs_in_india_short 3.4.1 Tidy data You can represent the same underlying data in multiple ways. The whole tidyverse phylosophy built upon the tidy datasets, that are datasets where: Each variable must have its own column. Each observation must have its own row. Each value must have its own cell. Here is data, that contains information about villages of Daghestan in .xlsx format. The data is separated by different sheets and contains the following variables (data obtained from different sources, so they have suffixes _s1 – first source and _s2 – second source): id_s1 – (s1) identification number from first source; name_1885 – (s1) name of the village according the 1885 census census_1885 – (s1) population according the 1885 census name_1895 – (s1) name of the village according the 1895 census census_1895 – (s1) population according the 1895 census name_1926 – (s1) name of the village according the 1926 census census_1926 – (s1) population according the 1926 census name_2010 – (s1) name of the village according the 2010 census census_2010 – (s1) population according the 2010 census language_s1 – (s1) language name according the first source name_s2 – (s2) village name according the second source language_s2 – (s2) language name according the second source Lat – (s2) latitude Lon – (s2) longitude elevation – (s2) altitude First, merge all sheets fromt the .xlsx file: Second, caclulate how many times the language name is the same in both sources. Third, calculate mean altitude for languages from the first source. Which is the highest? Fourth, calculate the population for languages from the second source in each census. Show the values obtained for the Lak language: "]
]
